unit core;

interface

uses
  shellapi, Wininet, classes, winapi.windows, Graphics, SysUtils, UrlMon,
  Tlhelp32, messages, core_db, Registry, aclapi, AccCtrl, forms, vcl.controls,
  shlobj, ComObj, activex, System.Generics.Collections, System.Hash, u_debug,
  cfg_form, bottom_form, vcl.ExtCtrls, math;

type

  // 叶节点
  TNode = class(timage)
  public
    nodePath: string;

    nodeLeft: integer; // 每个节点靠左位置
  end;

  TNodes = record
    Count: integer;
    NodesArray: array of TNode;
    IsConfiguring: Boolean;

    NodeSize: integer;

  const
    MarginTop = 10;
    VisibleHeight: integer = 9; // 代表可见高度
    TopSnapDistance: integer = 40; // 吸附距离

    /// 原始数据
    NodeWidth = 72;
    NodeHeight = 72;
    NodeGap = 30; // 间隔
  end;

  TUtils = record
    /// node 存储辅助
    FileMap: TDictionary<string, string>;

    ShortcutKey: string;
  public
    procedure LaunchApplication(path: string);
    // 根据宽度 得到间隙
    function CalculateSnapWidth(w: integer): integer;
    // 比例因子
    function CalculateZoomFactor(w: double): double;
    procedure SetAutoRun(ok: Boolean);

    function GetFormHeight(wh: integer): integer;

  end;

  TGblVar = class
  public
    DatabaseManager: tgdb;
    pathMap: TDictionary<integer, tobject>;
    utils: TUtils;
    nodes: TNodes;
  private
    formObject: TDictionary<string, tobject>;
  public
    function find(name_: string): tobject;
  end;

var
  g_core: TGblVar;

implementation

procedure TUtils.SetAutoRun(ok: Boolean);
var
  reg: TRegistry;
begin
  reg := TRegistry.create;
  try
    reg.RootKey := HKEY_CURRENT_USER;

    if reg.OpenKey('SOFTWARE\Microsoft\Windows\CurrentVersion\Run', true) then
      reg.WriteString('xtool', ExpandFileName(paramstr(0)));

    reg.CloseKey;
  finally
    reg.Free;
  end;
end;

// procedure TUtils.UpdateDatabase;
// var
// Hash: string;
// v: string;
// begin
// g_core.db.itemdb.clean();
// g_core.db.itemdb.clean(false);
//
// for var key in fileMap.Keys do
// begin
// v := '';
// fileMap.TryGetValue(key, v);
//
// Hash := THashMD5.GetHashString(key);
// // k v 存储在不同表中
// g_core.db.itemdb.SetVarValue(Hash, key);
// g_core.db.itemdb.SetVarValue(Hash, v, false);
//
// end;
//
// end;

function TUtils.GetFormHeight(wh: integer): integer;
begin
  Result := math.Ceil(g_core.nodes.NodeHeight * wh / 118) +
    g_core.DatabaseManager.cfgDb.GetInteger('ih'); // 118:72:198:xx
end;

function TUtils.CalculateSnapWidth(w: integer): integer;
begin
  Result := round(w * g_core.nodes.NodeGap / g_core.nodes.NodeWidth);
  // 64:30=128:?

end;

function TUtils.CalculateZoomFactor(w: double): double;
begin
  // 计算比例因子
  Result := (101.82 * 5 * w) / g_core.nodes.NodeWidth;
end;

procedure TUtils.LaunchApplication(path: string);
begin
  if path.trim = '' then
    exit;
  if path.Contains('https') or path.Contains('http') or path.Contains('.html')
    or path.Contains('.htm') then
    winapi.shellapi.ShellExecute(application.Handle, nil, PChar(path), nil, nil,
      SW_SHOWNORMAL)
  else
    ShellExecute(0, 'open', PChar(path), nil, nil, SW_SHOW);
end;

{ TGblVar }

function TGblVar.find(name_: string): tobject;
var
  vobj: tobject;
begin
  if g_core.formObject.TryGetValue(name_, vobj) then
    Result := vobj
  else
    Result := nil;
end;

initialization

g_core := TGblVar.create;

if g_core.DatabaseManager.cfgDb = nil then
  g_core.DatabaseManager.cfgDb := TCfgDB.create;

if g_core.DatabaseManager.itemdb = nil then
  g_core.DatabaseManager.itemdb := TItemsDb.create;

g_core.DatabaseManager.desktopdb := TdesktopDb.create;

g_core.utils.FileMap := TDictionary<string, string>.create;

// 初始化数据

g_core.nodes.NodeSize := g_core.DatabaseManager.cfgDb.GetInteger('ih');

g_core.formObject := TDictionary<string, tobject>.create;
g_core.formObject.AddOrSetValue('cfgForm', TCfgForm.create(nil));
g_core.formObject.AddOrSetValue('bottomForm', TbottomForm.create(nil));

g_core.utils.SetAutoRun(true);

finalization

for var MyElem in g_core.formObject.Values do
  FreeAndNil(MyElem);
g_core.formObject.Free;

g_core.utils.FileMap.Free;

g_core.Free;

end.
